PYTHON_INTERPRETER = python2.7
ROS_PACKAGE_NAME = pub_sub_demo

TOP = $(TUP_CWD)
ROS_GEN_PY = $(TOP)/external/ros_gen_py


# The script that generate python classes from ROS messages/services needs to know the location of the ROS python libraries, which is supposed to lie in PYTHONPATH.
export PYTHONPATH

# Generate python classes from ros messages
!msg = |> ^c MSG %f^ $(ROS_GEN_PY)/genmsg_py.py -p $(ROS_PACKAGE_NAME) -o . %f; mv _%B.py %B.py |> %B.py

# Generate python classes from ros services
!srv = |> ^c SRV %f^ $(ROS_GEN_PY)/gensrv_py.py -p $(ROS_PACKAGE_NAME) -o . %f; mv _%B.py %B.py |> %B.py

# Make sure python classes for messages/services are includable with "from <ROS_PACKAGE_NAME>.<MSG/SRV NAME> import <MSG/SRV NAME>"
!link = |> ^c LINK %f^ mkdir -p $(ROS_PACKAGE_NAME); ln -sf ../%f %o |> $(ROS_PACKAGE_NAME)/%b
!init = |> ^c INIT %o^ touch %o |> $(ROS_PACKAGE_NAME)/__init__.py

# Make shell script to call the original pythonscript with the classes for messages/services included into PYTHONPATH. (The output files from this rule are more readable)
!bin = |> ^c BIN %o^ echo '#!/bin/sh\nDIR=\$(dirname \$(realpath "$0"))\nPYTHONPATH=$PYTHONPATH:`find $DIR -type d -printf ":%%p"` $(PYTHON_INTERPRETER) $DIR/../../../src/\$(basename "$DIR")/main.py "$@"' > %o; chmod +x %o |> %d
